{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n{ Pipeline,               \\\n  transforms: TF, }       = require 'moonriver'\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    return undefined\n\n\n#===========================================================================================================\nclass Lexer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg                = cfg\n    GUY.props.hide @, 'types', ( require './types' ) @cfg\n    @[Symbol.iterator]  = @walk.bind @\n    state               = @reset()\n    @_compile()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  reset: -> @state =\n    position:   0\n    chunk:      ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile: ->\n    for token, cfg of @cfg.tokens\n      entry = @types.create.lxr_token_cfg cfg\n      # debug '^5435^', { token, cfg, entry, }\n      @cfg.tokens[ token ] = entry\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  read: ( source ) ->\n    @reset()\n    @feed source\n    @finish()\n    return [ @walk()..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  feed: ( chunk ) ->\n    # @types.validate.text chunk ### TAINT also allow buffers ###\n    @state.chunk = chunk\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ->\n    last_position = @state.chunk.length - 1\n    loop\n      break if @state.position > last_position\n      match = null\n      for token, entry of @cfg.tokens\n        entry.matcher.lastIndex = @state.position\n        continue unless ( match = @state.chunk.match entry.matcher )?\n        yield { token, text: match[ 0 ], }\n        break\n      throw new Error \"no match\" unless match?\n      @state.position += match[ 0 ].length\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_walker: ->\n    last_position = null\n    #.......................................................................................................\n    walker = ->\n      loop\n        break if @state.position > last_position\n        match = null\n        for token, entry of @cfg.tokens\n          # debug '^34345345^', @state.chunk\n          debug '^34345345^', @state.position, token\n          entry.matcher.lastIndex = @state.position\n          continue unless ( match = @state.chunk.match entry.matcher )?\n          yield { token, text: match[ 0 ], }\n          break\n        throw new Error \"no match\" unless match?\n        @state.position += match[ 0 ].length\n      return null\n    #.......................................................................................................\n    R = ( walker.bind @ )()\n    R.reset = =>\n      last_position   = @state.chunk.length - 1\n      @state.position = 0\n      # @reset()\n      return null\n    #.......................................................................................................\n    R.reset()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_pipeline: ->\n    # last          = Symbol 'last'\n    walker  = null\n    p       = new Pipeline()\n    p.push show = ( d ) -> urge '^49-1^', d\n    p.push xxx = ( source ) =>\n      @state.chunk = source\n      walker = @_create_walker()\n    p.push show = ( d ) -> urge '^49-2^', d\n    p.push xxx = ( d, send ) =>\n      # debug '^342^', d for d from @walk()\n      # info '^342^', d for d from @_create_walker()\n      # debug '^342^', @state\n      send token for token from walker\n    p.push TF.$window -1, +1, null\n    p.push ( d, send ) -> send [ d[ -1 ], d[ 0 ], d[ +1 ], ]\n    # p.push store = ( d ) => @state.tokens.push d\n    return p\n\n  #---------------------------------------------------------------------------------------------------------\n  finish: ->\n    return null\n\n\n############################################################################################################\nmodule.exports = { Token, Lexer, }\n"
  ]
}