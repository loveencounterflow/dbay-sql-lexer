{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DEMO-MOO-LEXER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals\n  copy_regex }            = GUY.samesame\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    return undefined\n\n\n#===========================================================================================================\nclass Lexer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg                = cfg\n    GUY.props.hide @, 'types', ( require './types' ) @cfg\n    @[Symbol.iterator]  = @walk.bind @\n    state               = @reset()\n    @_compile()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile: ->\n    for token, cfg of @cfg.tokens\n      entry = @types.create.lxr_token_cfg cfg\n      # debug '^5435^', { token, cfg, entry, }\n      @cfg.tokens[ token ] = entry\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  read: ( source ) ->\n    @reset()\n    @feed source\n    @finish()\n    return [ @walk()..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  feed: ( chunk ) ->\n    # @types.validate.text chunk ### TAINT also allow buffers ###\n    @state.chunk = chunk\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  walk: ->\n    last_position = @state.chunk.length - 1\n    prv_token     = null\n    prv_entry     = null\n    collector     = []\n    flush         = ->\n      yield from collector\n      collector = []\n      return null\n    loop\n      break if @state.position >= last_position\n      match = null\n      for token, entry of @cfg.tokens\n        entry.matcher.lastIndex = @state.position\n        continue unless ( match = @state.chunk.match entry.matcher )?\n        #...................................................................................................\n        if prv_entry?.consolidate\n          debug '^345345^', prv_token, prv_entry, entry, collector\n          if prv_token is entry.token\n            debug '^68-1^'\n            collector.push token\n          else\n            debug '^68-2^'\n            ### TAINT code duplication ###\n            flush()\n            yield { token, text: match[ 0 ], }\n        else\n          debug '^68-3^'\n          flush()\n          yield { token, text: match[ 0 ], }\n        #...................................................................................................\n        prv_token = token\n        prv_entry = entry\n        break\n      unless match?\n        throw new Error \"no match\"\n      @state.position += match[ 0 ].length\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  finish: ->\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  reset: -> @state =\n    position:   0\n    chunk:      ''\n\n\n############################################################################################################\nmodule.exports = { Token, Lexer, }\n"
  ]
}