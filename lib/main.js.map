{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA;;EAAM;;;IAAN,MAAA,MAAA;MACE,WAAa,CAAC,GAAD,EAAM,MAAM,CAAA,CAAZ,CAAA;AACf,YAAA,aAAA,EAAA,CAAA,EAAA;QAAI,IAAC,CAAA,GAAD,GAAoB;QACpB,IAAC,CAAA,eAAD,sEAA2C;QAC3C,IAAC,CAAA,MAAD,GAAoB;QACpB,IAAC,CAAA,WAAD,GAAoB;QACpB,IAAC,CAAA,aAAD,GAAoB;QACpB,CAAA,GAAI;AACJ,eAAM,IAAC,CAAA,KAAD,GAAS,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf;UACE,aAAA,GAAiB,IAAC,CAAA,YAAD,CAAA,CAAA,IACA,IAAC,CAAA,SAAD,CAAA,CADA,IAEA,IAAC,CAAA,YAAD,CAAA,CAFA,IAGA,IAAC,CAAA,aAAD,CAAA,CAHA,IAIA,IAAC,CAAA,eAAD,CAAA,CAJA,IAKA,IAAC,CAAA,cAAD,CAAA,CALA,IAMA,IAAC,CAAA,UAAD,CAAA,CANA,IAOA,IAAC,CAAA,aAAD,CAAA,CAPA,IAQA,IAAC,CAAA,WAAD,CAAA,CARA,IASA,IAAC,CAAA,SAAD,CAAA,CATA,IAUA,IAAC,CAAA,QAAD,CAAA,CAVA,IAWA,IAAC,CAAA,gBAAD,CAAA,CAXA,IAYA,IAAC,CAAA,YAAD,CAAA,CAZA,IAaA,IAAC,CAAA,gBAAD,CAAA,CAbA,IAcA,IAAC,CAAA,qBAAD,CAAA,CAdA,IAeA,IAAC,CAAA,WAAD,CAAA,CAfA,IAgBA,IAAC,CAAA,cAAD,CAAA,CAhBA,IAiBA,IAAC,CAAA,WAAD,CAAA,CAjBA,IAkBA,IAAC,CAAA,eAAD,CAAA,CAlBA,IAmBA,IAAC,CAAA,YAAD,CAAA,CAnBA,IAoBA,IAAC,CAAA,SAAD,CAAA,CApBA,IAqBA,IAAC,CAAA,OAAD,CAAA;UAEjB,IAA6E,aAAA,GAAgB,CAA7F;YAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,gCAAA,CAAA,CAAmC,IAAC,CAAA,KAAK,CAAC,KAAP,CAAa,CAAb,EAAe,EAAf,CAAnC,CAAA,CAAA,CAAV,EAAN;;UACA,CAAA,IAAK;UACL,IAAC,CAAA,aAAD,IAAkB;QA1BpB;QA2BA,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,EAAd;QACA,IAAC,CAAA,WAAD,CAAA;MAnCW;;MAqCb,WAAa,CAAA,CAAA;AACf,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAI;AAAA;QAAA,KAAA,6CAAA;;UACE,IAAG,KAAK,CAAC,CAAD,CAAL,KAAY,MAAf;YACE,UAAA,GAAa,IAAC,CAAA,MAAM,CAAC,CAAA,GAAE,CAAH;YACpB,MAAO,UAAU,CAAC,CAAD,CAAV,KAAiB,OAAjB,IAA4B,UAAU,CAAC,CAAD,CAAV,KAAiB,OAApD;2BACE,KAAK,CAAC,CAAD,CAAL,GAAW,cADb;aAAA,MAAA;mCAAA;aAFF;WAAA,MAAA;iCAAA;;QADF,CAAA;;MADW;;MAOb,KAAO,CAAC,IAAD,EAAO,KAAP,CAAA;eACL,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,CAAC,IAAD,EAAO,KAAP,EAAc,IAAC,CAAA,WAAf,EAA4B,IAAC,CAAA,aAA7B,CAAb;MADK;;MAGP,uBAAyB,CAAC,IAAD,EAAO,KAAP,EAAc,OAAK,CAAnB,EAAsB,aAAW,IAAjC,EAAuC,SAAO,IAA9C,CAAA;AAC3B,YAAA,KAAA,EAAA;QAAI,KAAgB,CAAA,KAAA,GAAQ,KAAK,CAAC,IAAN,CAAW,IAAC,CAAA,KAAZ,CAAR,CAAhB;AAAA,iBAAO,EAAP;;QACA,SAAA,GAAY,KAAK,CAAC,IAAD,CAAM,CAAC,OAAZ,CAAoB,KAApB,EAA2B,GAA3B;QACZ,IAA2B,MAA3B;UAAA,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,SAAb,EAAA;;AACA,eAAO,KAAK,CAAC,UAAD,CAAY,CAAC;MAJF;;MAMzB,iBAAmB,CAAC,IAAD,EAAO,KAAP,EAAc,OAAK,CAAnB,EAAsB,aAAW,IAAjC,EAAuC,SAAO,IAA9C,CAAA;AACrB,YAAA,KAAA,EAAA;QAAI,KAAgB,CAAA,KAAA,GAAQ,KAAK,CAAC,IAAN,CAAW,IAAC,CAAA,KAAZ,CAAR,CAAhB;AAAA,iBAAO,EAAP;;QACA,SAAA,GAAY,KAAK,CAAC,IAAD;QACjB,IAA2B,MAA3B;UAAA,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,SAAb,EAAA;;AACA,eAAO,KAAK,CAAC,UAAD,CAAY,CAAC;MAJR;;MAMnB,gBAAkB,CAAC,IAAD,EAAO,OAAK,IAAZ,CAAA;AACpB,YAAA,KAAA,EAAA;QAAI,IAAA,GAAO,IAAC,CAAA,WAAD,CAAa,IAAb;QACP,OAAA,GAAc,OAAQ,CAAC,IAAV,CAAe,IAAf,CAAH,GACR,IAAI,MAAJ,CAAW,CAAA,EAAA,CAAA,CAAK,IAAL,CAAA,IAAA,CAAX,EAA2B,IAA3B,CADQ,GAGR,IAAI,MAAJ,CAAW,CAAA,EAAA,CAAA,CAAK,IAAL,CAAA,CAAA,CAAX,EAAwB,IAAxB;QACF,KAAA,GAAQ,OAAO,CAAC,IAAR,CAAa,IAAC,CAAA,KAAd;QACR,KAAgB,KAAhB;AAAA,iBAAO,EAAP;;QACA,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,KAAK,CAAC,CAAD,CAAlB;AACA,eAAO,KAAK,CAAC,CAAD,CAAG,CAAC;MATA;;MAWlB,gBAAkB,CAAC,IAAD,EAAO,IAAP,CAAA;AACpB,YAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAI,GAAA,GAAM;QACN,KAAA,sCAAA;;UACE,GAAA,GAAM,IAAC,CAAA,gBAAD,CAAkB,IAAlB,EAAwB,KAAxB;UACN,IAAS,GAAA,GAAM,CAAf;AAAA,kBAAA;;QAFF;eAGA;MALgB;;MAOlB,YAAc,CAAA,CAAA;eACZ,IAAC,CAAA,gBAAD,CAAkB,QAAlB,CAAA,IACA,IAAC,CAAA,gBAAD,CAAkB,QAAlB,CADA,IAEA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAFA,IAGA,IAAC,CAAA,gBAAD,CAAkB,SAAlB,CAHA,IAIA,IAAC,CAAA,gBAAD,CAAkB,QAAlB,CAJA,IAKA,IAAC,CAAA,gBAAD,CAAkB,UAAlB,CALA,IAMA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CANA,IAOA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAPA,IAQA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CARA,IASA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CATA,IAUA,IAAC,CAAA,gBAAD,CAAkB,IAAlB,CAVA,IAWA,IAAC,CAAA,gBAAD,CAAkB,QAAlB,CAXA,IAYA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAZA,IAaA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAbA,IAcA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAdA,IAeA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAfA,IAgBA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAhBA,IAiBA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAjBA,IAkBA,IAAC,CAAA,gBAAD,CAAkB,IAAlB,CAlBA,IAmBA,IAAC,CAAA,gBAAD,CAAkB,IAAlB,CAnBA,IAoBA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CApBA,IAqBA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CArBA,IAsBA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAtBA,IAuBA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAvBA,IAwBA,IAAC,CAAA,gBAAD,CAAkB,KAAlB,CAxBA,IAyBA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAzBA,IA0BA,IAAC,CAAA,gBAAD,CAAkB,KAAlB,CA1BA,IA2BA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CA3BA,IA4BA,IAAC,CAAA,gBAAD,CAAkB,QAAlB,CA5BA,IA6BA,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CA7BA,IA8BA,IAAC,CAAA,gBAAD,CAAkB,KAAlB,CA9BA,IA+BA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CA/BA,IAgCA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAhCA,IAiCA,IAAC,CAAA,gBAAD,CAAkB,MAAlB,CAjCA,IAkCA,IAAC,CAAA,gBAAD,CAAkB,OAAlB;MAnCY;;MAqCd,QAAU,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,KAAlB,EAAyB,GAAzB;MAAH;;MACV,aAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,UAAlB,EAA8B,aAA9B;MAAH;;MAClB,SAAkB,CAAA,CAAA;eAChB,IAAC,CAAA,gBAAD,CAAkB,MAAlB,EAA0B,IAA1B,CAAA,IACA,IAAC,CAAA,gBAAD,CAAkB,YAAlB,EAAgC,UAAhC;MAFgB;;MAGlB,gBAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,aAAlB,EAAiC,gBAAjC;MAAH;;MAClB,YAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,SAAlB,EAA6B,YAA7B;MAAH;;MAClB,gBAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,eAAlB,EAAmC,aAAnC;MAAH;;MAClB,qBAAuB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,qBAAlB,EAAyC,mBAAzC;MAAH;;MACvB,aAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,UAAlB,EAA8B,aAA9B;MAAH;;MAClB,cAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,WAAlB,EAA+B,eAA/B;MAAH;;MAClB,YAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,gBAAD,CAAkB,SAAlB,EAA6B,OAA7B;MAAH;;MAElB,SAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,MAAnB,EAA2B,IAA3B;MAAH;;MAClB,UAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,OAAnB,EAA4B,KAA5B;MAAH;;MAClB,YAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,SAAnB,EAA8B,OAA9B,EAAuC,CAAvC,EAA0C,CAA1C;MAAH;;MAClB,WAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,QAAnB,EAA6B,MAA7B;MAAH;;MAClB,cAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,SAAhC,EAA2C,CAA3C,EAA8C,CAA9C;MAAH;;MAClB,WAAkB,CAAA,CAAA;eAChB,IAAC,CAAA,uBAAD,CAAyB,QAAzB,EAAmC,MAAnC,EAA2C,CAA3C,EAA8C,CAA9C,CAAA,IACA,IAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,SAAhC,EAA2C,CAA3C,EAA8C,CAA9C;MAFgB;;MAKlB,WAAa,CAAA,CAAA;eACX,IAAC,CAAA,iBAAD,CAAmB,YAAnB,EAAiC,KAAjC,CAAA,IACA,IAAC,CAAA,iBAAD,CAAmB,aAAnB,EAAkC,KAAlC;MAFW;;MAIb,eAAiB,CAAA,CAAA;AACnB,YAAA;QAAI,KAAA,GAAS,yBAA0B,CAAC,IAA5B,CAAiC,IAAC,CAAA,KAAlC;QACR,KAAgB,KAAhB;AAAA,iBAAO,EAAP;;QACA,IAAC,CAAA,KAAD,CAAO,QAAP,EAAiB,KAAK,CAAC,CAAD,CAAtB;QACA,IAAC,CAAA,KAAD,CAAO,iBAAP,EAA0B,KAAK,CAAC,CAAD,CAA/B;eACA,KAAK,CAAC,CAAD,CAAG,CAAC;MALM;;MAOjB,eAAiB,CAAA,CAAA;AACnB,YAAA,KAAA,EAAA,QAAA,EAAA;QAAI,KAAgB,CAAA,KAAA,GAAQ,UAAU,CAAC,IAAX,CAAgB,IAAC,CAAA,KAAjB,CAAR,CAAhB;AAAA,iBAAO,EAAP;;QACA,SAAA,GAAY,KAAK,CAAC,CAAD;QACjB,IAAmC,IAAC,CAAA,eAApC;UAAA,IAAC,CAAA,KAAD,CAAO,YAAP,EAAqB,SAArB,EAAA;;QACA,QAAA,GAAW,SAAS,CAAC,KAAV,CAAgB,KAAhB,EAAuB,EAAvB;QACX,IAAC,CAAA,WAAD,wBAAgB,QAAQ,CAAE,gBAAV,IAAoB;AACpC,eAAO,SAAS,CAAC;MANF;;MAQjB,SAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,SAAhC;MAAH;;MAClB,OAAkB,CAAA,CAAA;eAAG,IAAC,CAAA,iBAAD,CAAmB,SAAnB,EAA8B,OAA9B;MAAH;;MAElB,WAAa,CAAC,GAAD,CAAA;eACX,GAAG,CAAC,OAAJ,CAAY,0BAAZ,EAAwC,MAAxC;MADW;;IAhKf;;IAmKE,aAAA,GAAsB,CAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B,KAA/B;;IACtB,eAAA,GAAsB,CAAC,KAAD,EAAQ,MAAR;;IACtB,aAAA,GAAsB,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,GAAlB,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,GAAnC,EAAwC,MAAxC,EAAgD,UAAhD,EAA4D,OAA5D,EAAqE,WAArE,EAAkF,QAAlF,EAA4F,IAA5F,EAAkG,QAAlG,EAA4G,YAA5G;;IACtB,aAAA,GAAsB,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B,MAA/B;;IACtB,mBAAA,GAAsB,CAAC,QAAD;;IACtB,gBAAA,GAAsB,CAAC,KAAD,EAAQ,IAAR;;IACtB,YAAA,GAAsB,CAAC,SAAD,EAAY,aAAZ;;IACtB,OAAA,GAAsB,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB;;IACtB,IAAA,GAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,IAAjB;;IACtB,UAAA,GAAsB,CAAC,GAAD,EAAM,GAAN;;IACtB,IAAA,GAAsB;;IACtB,KAAA,GAAkB;;IAClB,UAAA,GAAsB;;IACtB,OAAA,GAAsB;;IACtB,SAAA,GAAsB;;IACtB,MAAA,GAAsB;;IACtB,MAAA,GAAsB;;IACtB,SAAA,GAAsB;;IACtB,SAAA,GAAsB;;IACtB,OAAA,GAAsB;;;;gBAtLxB;;;EAyLA,OAAO,CAAC,QAAR,GAAmB,QAAA,CAAE,GAAF,EAAO,GAAP,CAAA;AACnB,QAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAE,CAAA,GAAI;AACJ;IAAA,KAAA,qCAAA;MAAI,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAmB,GAAnB;MACF,CAAC,CAAC,IAAF,CAAO,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,CAAP;IADF;AAEA,WAAO;EAJU;AAzLnB",
  "sourcesContent": [
    "class Lexer\n  constructor: (sql, cfg = {} ) ->\n    @sql              = sql\n    @keep_whitespace  = cfg?.keep_whitespace ? false\n    @tokens           = []\n    @currentLine      = 1\n    @currentOffset    = 0\n    i = 0\n    while @chunk = sql.slice(i)\n      bytesConsumed =  @keywordToken() or\n                       @starToken() or\n                       @booleanToken() or\n                       @functionToken() or\n                       @windowExtension() or\n                       @sortOrderToken() or\n                       @commaToken() or\n                       @operatorToken() or\n                       @numberToken() or\n                       @mathToken() or\n                       @dotToken() or\n                       @conditionalToken() or\n                       @betweenToken() or\n                       @subSelectOpToken() or\n                       @subSelectUnaryOpToken() or\n                       @stringToken() or\n                       @parameterToken() or\n                       @parensToken() or\n                       @whitespaceToken() or\n                       @literalToken() or\n                       @semicolon() or\n                       @unknown()\n\n      throw new Error(\"NOTHING CONSUMED: Stopped at - '#{@chunk.slice(0,30)}'\") if bytesConsumed < 1\n      i += bytesConsumed\n      @currentOffset += bytesConsumed\n    @token('EOF', '')\n    @postProcess()\n\n  postProcess: ->\n    for token, i in @tokens\n      if token[0] is 'STAR'\n        next_token = @tokens[i+1]\n        unless next_token[0] is 'COMMA' or next_token[0] is 'FROM'\n          token[0] = 'MATH_MULTI'\n\n  token: (name, value) ->\n    @tokens.push([name, value, @currentLine, @currentOffset])\n\n  tokenizeFromStringRegex: (name, regex, part=0, lengthPart=part, output=true) ->\n    return 0 unless match = regex.exec(@chunk)\n    partMatch = match[part].replace(/''/g, \"'\")\n    @token(name, partMatch) if output\n    return match[lengthPart].length\n\n  tokenizeFromRegex: (name, regex, part=0, lengthPart=part, output=true) ->\n    return 0 unless match = regex.exec(@chunk)\n    partMatch = match[part]\n    @token(name, partMatch) if output\n    return match[lengthPart].length\n\n  tokenizeFromWord: (name, word=name) ->\n    word = @regexEscape(word)\n    matcher = if (/^\\w+$/).test(word)\n      new RegExp(\"^(#{word})\\\\b\",'ig')\n    else\n      new RegExp(\"^(#{word})\",'ig')\n    match = matcher.exec(@chunk)\n    return 0 unless match\n    @token(name, match[1])\n    return match[1].length\n\n  tokenizeFromList: (name, list) ->\n    ret = 0\n    for entry in list\n      ret = @tokenizeFromWord(name, entry)\n      break if ret > 0\n    ret\n\n  keywordToken: ->\n    @tokenizeFromWord('SELECT') or\n    @tokenizeFromWord('INSERT') or\n    @tokenizeFromWord('INTO') or\n    @tokenizeFromWord('DEFAULT') or\n    @tokenizeFromWord('VALUES') or\n    @tokenizeFromWord('DISTINCT') or\n    @tokenizeFromWord('FROM') or\n    @tokenizeFromWord('WHERE') or\n    @tokenizeFromWord('GROUP') or\n    @tokenizeFromWord('ORDER') or\n    @tokenizeFromWord('BY') or\n    @tokenizeFromWord('HAVING') or\n    @tokenizeFromWord('LIMIT') or\n    @tokenizeFromWord('JOIN') or\n    @tokenizeFromWord('LEFT') or\n    @tokenizeFromWord('RIGHT') or\n    @tokenizeFromWord('INNER') or\n    @tokenizeFromWord('OUTER') or\n    @tokenizeFromWord('ON') or\n    @tokenizeFromWord('AS') or\n    @tokenizeFromWord('CASE') or\n    @tokenizeFromWord('WHEN') or\n    @tokenizeFromWord('THEN') or\n    @tokenizeFromWord('ELSE') or\n    @tokenizeFromWord('END') or\n    @tokenizeFromWord('UNION') or\n    @tokenizeFromWord('ALL') or\n    @tokenizeFromWord('LIMIT') or\n    @tokenizeFromWord('OFFSET') or\n    @tokenizeFromWord('FETCH') or\n    @tokenizeFromWord('ROW') or\n    @tokenizeFromWord('ROWS') or\n    @tokenizeFromWord('ONLY') or\n    @tokenizeFromWord('NEXT') or\n    @tokenizeFromWord('FIRST')\n\n  dotToken: -> @tokenizeFromWord('DOT', '.')\n  operatorToken:    -> @tokenizeFromList('OPERATOR', SQL_OPERATORS)\n  mathToken:        ->\n    @tokenizeFromList('MATH', MATH) or\n    @tokenizeFromList('MATH_MULTI', MATH_MULTI)\n  conditionalToken: -> @tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS)\n  betweenToken:     -> @tokenizeFromList('BETWEEN', SQL_BETWEENS)\n  subSelectOpToken: -> @tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP)\n  subSelectUnaryOpToken: -> @tokenizeFromList('SUB_SELECT_UNARY_OP', SUB_SELECT_UNARY_OP)\n  functionToken:    -> @tokenizeFromList('FUNCTION', SQL_FUNCTIONS)\n  sortOrderToken:   -> @tokenizeFromList('DIRECTION', SQL_SORT_ORDERS)\n  booleanToken:     -> @tokenizeFromList('BOOLEAN', BOOLEAN)\n\n  starToken:        -> @tokenizeFromRegex('STAR', STAR)\n  commaToken:       -> @tokenizeFromRegex('COMMA', COMMA)\n  literalToken:     -> @tokenizeFromRegex('LITERAL', LITERAL, 1, 0)\n  numberToken:      -> @tokenizeFromRegex('NUMBER', NUMBER)\n  parameterToken:   -> @tokenizeFromRegex('PARAMETER', PARAMETER, 1, 0)\n  stringToken:      ->\n    @tokenizeFromStringRegex('STRING', STRING, 1, 0) ||\n    @tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0)\n\n\n  parensToken: ->\n    @tokenizeFromRegex('LEFT_PAREN', /^\\(/,) or\n    @tokenizeFromRegex('RIGHT_PAREN', /^\\)/,)\n\n  windowExtension: ->\n    match = (/^\\.(win):(length|time)/i).exec(@chunk)\n    return 0 unless match\n    @token('WINDOW', match[1])\n    @token('WINDOW_FUNCTION', match[2])\n    match[0].length\n\n  whitespaceToken: ->\n    return 0 unless match = WHITESPACE.exec(@chunk)\n    partMatch = match[0]\n    @token('WHITESPACE', partMatch) if @keep_whitespace\n    newlines = partMatch.match(/\\n/g, '')\n    @currentLine += newlines?.length || 0\n    return partMatch.length\n\n  semicolon:        -> @tokenizeFromRegex('SEMICOLON', SEMICOLON)\n  unknown:          -> @tokenizeFromRegex('UNKNOWN', UNKNOWN)\n\n  regexEscape: (str) ->\n    str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n\n  SQL_FUNCTIONS       = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM']\n  SQL_SORT_ORDERS     = ['ASC', 'DESC']\n  SQL_OPERATORS       = ['=', '!=', '>=', '>', '<=', '<>', '<', 'LIKE', 'NOT LIKE', 'ILIKE', 'NOT ILIKE', 'IS NOT', 'IS', 'REGEXP', 'NOT REGEXP']\n  SUB_SELECT_OP       = ['IN', 'NOT IN', 'ANY', 'ALL', 'SOME']\n  SUB_SELECT_UNARY_OP = ['EXISTS']\n  SQL_CONDITIONALS    = ['AND', 'OR']\n  SQL_BETWEENS        = ['BETWEEN', 'NOT BETWEEN']\n  BOOLEAN             = ['TRUE', 'FALSE', 'NULL']\n  MATH                = ['+', '-', '||', '&&']\n  MATH_MULTI          = ['/', '*']\n  STAR                = /^\\*/\n  COMMA           = /^,/\n  WHITESPACE          = /^[ \\n\\r]+/\n  LITERAL             = /^`?([a-z_][a-z0-9_]{0,}(\\:(number|float|string|date|boolean))?)`?/i\n  PARAMETER           = /^\\$([a-z0-9_]+(\\:(number|float|string|date|boolean))?)/\n  NUMBER              = /^[+-]?[0-9]+(\\.[0-9]+)?/\n  STRING              = /^'((?:[^\\\\']+?|\\\\.|'')*)'(?!')/\n  DBLSTRING           = /^\"([^\\\\\"]*(?:\\\\.[^\\\\\"]*)*)\"/\n  SEMICOLON           = /^;/\n  UNKNOWN             = /./u\n\n#-----------------------------------------------------------------------------------------------------------\nexports.tokenize = ( sql, cfg ) ->\n  R = []\n  for [ type, text, lnr, idx, ] in ( new Lexer sql, cfg ).tokens\n    R.push { type, text, idx, }\n  return R\n"
  ]
}